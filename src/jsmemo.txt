원시값의 메서드

자바스크립트는 원시값(문자열,숫자등 )을 마치 객체처럼 다룰 수 있게 해준다.
원시값에도 객체에서처럼 메서드를 호출 할 수 있다.

원시값
원시형의 값이다.
원시형의 종류에는 문자(String), 숫자(number), bigint, 불린(boolean), 심볼(symbol), null, undefined 형으로 7가지다.

객체
프로퍼티에 다양한 종류의 값을 저장 할 수 있다.
{name : "John", age : 30}와 같이 대괄호 {}를 사용해서 만들 수 있다.
자바스크립트에 여러종류의 객테가 있는데, 함수도 객체의 일종이다.
객체의 장점 중 하나는 함수를 프로퍼티로 저장 할 수 있다.

자바스크립트는 날짜, 오류 HTML요소등을 다룰 수 있게 해주는 다양한 내장객체를 제공한다.
이 객체들은 고유한 프로퍼티와 메서드를 가진다.
하지만 이런 기능들을 사용하면 시스템 자원이 많이 소모된다는 단점이 있다.
객체는 원시값보다 무겁고, 내부구조를 유지하기 위해 추자가원을 사용하기 때문이다.

원시값을 객체처럼 사용하기
자바스크립트 창안자는 다음과 같은 모순점을 해결해야만 했다.
문자열이나 숫자와 같은 원시값을 다루는 작업이 많은데, 메서드를 사용화면 작업을 수월하게 할 수 있다.
원시값은 가능한한 빠르고 가벼워야 한다.

좀 어색해 보이지만, 자바스크립트 창안자는 아래와 같은 방법을 써서 해결책을 만들었다.
1. 원시값은 원시값 그대로 남겨줘 단일 값 형태를 유지한다.
2. 문자열, 숫자, 불린, 심볼의 메서드와 프로퍼티에 접근할 수 있도록 언어 차원에서 허용한다.
3. 이를 가능하게 하기 위해, 원시값이 메서드나 프로퍼티에 접근하려 하면 추가 기능을 제공해주는 특수한 객체, "원시 래퍼 객체(object wrapper)"를 만들어
   준다. 이 객체는 곧 삭제된다.

래퍼객체는 원시 타입에 따라 종류가 다양하다. 각 래퍼객체는 원시자료향의 이름을 그대로 차용해서,
String,Number,Boolean, Symbol라고 부른다. 래퍼 객체 마다 제공하는 메서드 역시 다르다.

인수로 받은 문자열의 모든 글자를 대문자로 바꿔주는 메서드 str.toUpperCase()를 예로 들어서 설명.
↓ 메서드는 아래와 같이 동작한다.
let str = "Hello";
alert( str.toUpperCase() ); // HELLO

1. 문자열은 str은 원시값이므로 원시값의 프로퍼티(toUpperCase)에 접근하는 순간 특별한 객체가 만들어진다.
   이 객체는 문자열의 값을 알고 있고, toUpperCase()와 같은 유용한 메서드를 가지고 있다.
2. 메서드가 실행되고, 새로운 문자열이 반환된다.(alert 창에 이 문자열이 출력된다.)
3. 특별한 객체는 파괴되고, 원시값 str만 남는다.
이런 내부 프로세스를 통해 원시값을 가볍게 유지하면서 메서드를 호출 할 수 있다.

자바스크립트 엔진은 위 프로세스의 최적화에 많은 신경을 쓴다.
원시 래퍼 객체를 만들지 않고 마치 원시 래퍼객체를 생성한것처럼 동작하게 해준다.



숫자형
모던자바스크립트는 숫자를 나타내는 두가지자료형을 지원한다.
1. 일반적인 숫자는 '배정밀도 부동소수점 숫자(double precision floating point number)'로 알려진 64비트 형식의 IEEE-754에 저장된다.
2. 임의의 길이를 가진 정수는 BigInt라는 숫자로 나타 낼 수 있다.
   일반적인 숫자는 2^53이상이거나 -2^53이하일 수 없다는 제약 때문에 BigInt라는 새로운 자료형이 만들어졌다.

숫자를 입력하는 다양한 방법
10억을 입력해야된다고 가정을할때 가장 좋은 방법은 직접 10억(one billion)을 써주는것이다.
let billion = 1000000000;

0을 많이 사용해서 숫자를 표현하다보면 잘못입력하기도 쉽고, 0을 많이 입력하는것도 귀찮은 작업이다.
보통 10억(billion)을 나타낼 땐 '1bn'을 사용하고, 73억을 나타낼 땐 '7.3bn'을 사용한다. 큰 숫자를 나타낼때 이런 방법을 사용한다.
자바스크립트에서도 숫자 옆에 'e'를 붙이고 0의 개수를 그 옆에 붙여주면 숫자를 줄일 수 있다.
let billion = 1e9;  // 10억, 1과 9개의 0
alert( 7.3e9 );  // 73억 (7,300,000,000)

'e'는 e 왼쪽의 수에 e 오른쪽에 있는 수만큼의 10의 거듭제곱을 곱하는 효과가 있다.
1e3 = 1 * 1000
1.23e6 = 1.23 * 1000000

아주 작은숫자(마이크로 초) 표현하기
let ms = 0.000001;
작은 숫자를 표현할 때도 큰 숫자를 표현할 때처럼 'e'를 사용할 수 있다. 0을 명시적으로 쓰고싶지 않다면 아래처럼 표현 할 수 있다.
let ms = 1e-6; // 1에서 왼쪽으로 6번 소수점 이동

0.000001에서 0의 개수를 세면 6이므로 0.000001은 당연히 1e-6이된다.
'e' 우측에 음수가 있으면, 이 음수의 절댓값 만큼 10을 거듭제곱한 수로 나누는 것을 의미한다.
// 10을 세 번 거듭제곱한 수로 나눔
1e-3 = 1 / 1000 (=0.001)

// 10을 여섯 번 거듭제곱한 수로 나눔
1.23e-6 = 1.23 / 1000000 (=0.00000123)

16진수, 2진수, 8진수
16진수는 색을 나타내거나 문자를 인코딩할 때 등 다양한 곳에서 두루 쓰인다.
다양한 곳에서 쓰이는 만큼 당연히 16진수를 짧게 표현하는 방법이 존재한다. 16진수는 0x를 사용해 표현할 수 있다.
alert( 0xff ); // 255
alert( 0xFF ); // 255 (대·소문자를 가리지 않으므로 둘 다 같은 값을 나타낸다.)

2진수와 8진수는 아주 드물게 쓰이긴 하지만, 접두사 0b와 0o를 사용해 간단히 나타낼 수 있다.
let a = 0b11111111; // 255의 2진수
let b = 0o377; // 255의 8진수
alert( a == b ); // true, 진법은 다르지만, a와 b는 같은 수

자바스크립트에서 지원하는 진법은 3개다. 이외의 진법을 사용하려면 함수 parseInt를 사용해야한다.


toString(base)
num.toString(base) 메서드는 base진법으로 num을 표현한 후, 이를 문자형으로 변환해 반환한다.
↓아래는 예시이다.
let num = 255;
alert( num.toString(16) );  // ff
alert( num.toString(2) );   // 11111111

base는 2에서 36까지 쓸 수 있는데, 기본값은 10이다.
base별 유스 케이스는 아래와 같다.
base=16 – 16진수 색, 문자 인코딩 등을 표현할 때 사용한다. 숫자는 0부터 9, 10 이상의 수는 A부터 F를 사용하여 나타낸다.
base=2 – 비트 연산 디버깅에 주로 쓰입니다. 숫자는 0 또는 1이 될 수 있다.
base=36 – 사용할 수 있는 base 중 최댓값으로, 0..9와 A..Z를 사용해 숫자를 표현한다. 알파벳 전체가 숫자를 나타내는 데 사용됨.
36 베이스는 url을 줄이는 것과 같이 숫자로 된 긴 식별자를 짧게 줄일 때 유용하다.

alert( 123456..toString(36) ); // 2n9c
※점 두 개와 메서드 호출※
123456..toString(36)에 있는 점 두 개는 오타가 아니다. 위 예시처럼 숫자를 대상으로 메서드 toString을 직접 호출하고 싶다면 숫자 다음에 점 두 개 ..를
 붙여야한다.
123456.toString(36)처럼 점을 한 개만 사용하면, 첫 번째 점 이후는 소수부로 인식되어 에러가 발생할 수 있다.
점을 하나 더 추가하면 자바스크립트는 소수부가 없다고 판단하고 함수를 호출한다.
(123456).toString(36)도 가능하다.


어림수 구하기
어림수를 구하는 것(rounding)은 숫자를 다룰 때 가장 많이 사용되는 연산 중 하나다.
↓아래는 어림수 관련 내장 함수 몇 가지 설명이다.
Math.floor
소수점 첫째 자리에서 내림(버림). 3.1은 3, -1.1은 -2가 된다.

Math.ceil
소수점 첫째 자리에서 올림. 3.1은 4, -1.1은 -1이 된다.

Math.round
소수점 첫째 자리에서 반올림. 3.1은 3, 3.6은 4, -1.1은 -1이 된다.

Math.trunc (Internet Explorer에서는 지원하지 않음)
소수부를 무시. 3.1은 3이 되고 -1.1은 -1이 된다.

1. 곱하기와 나누기
소수점 두 번째 자리 숫자까지만 남기고 싶은 경우에
숫자에 100 또는 100보다 큰 10의 거듭제곱 수를 곱한 후, 원하는 어림수 내장 함수를 호출하고 처음 곱한 수를 다시 나누면 된다.
let num = 1.23456;
alert( Math.floor(num * 100) / 100 ); // 1.23456 -> 123.456 -> 123 -> 1.23

2. 소수점 n 번째 수까지의 어림수를 구한 후 이를 문자형으로 반환해주는 메서드인 toFixed(n)를 사용한다.
let num = 12.34;
alert( num.toFixed(1) ); // "12.3"

toFixed는 Math.round와 유사하게 가장 가까운 값으로 올림 혹은 버림해준다.
let num = 12.36;
alert( num.toFixed(1) ); // "12.4"

toFixed를 사용할 때 주의할 점은 이 메서드의 반환 값이 문자열이라는 것이다. 소수부의 길이가 인수보가 작으면 끝에 0이 추가된다.
let num = 12.34;
alert( num.toFixed(5) ); // "12.34000", 소수부의 길이를 5로 만들기 위해 0이 추가되었다.
+num.toFixed(5)처럼 단항 덧셈 연산자를 앞에 붙이거나 Number()를 호출하면 문자형의 숫자를 숫자형으로 변환할 수 있다.


부정확한 계산
숫자는 내부적으로 64비트 형식 IEEE-754으로 표현되기 때문에 숫자를 저장하려면 정확히 64비트가 필요하다.
64비트 중 52비트는 숫자를 저장하는 데 사용되고, 11비트는 소수점 위치를(정수는 0), 1비트는 부호를 저장하는 데 사용된다.
숫자가 너무 커지면 64비트 공간이 넘쳐서 Infinity로 처리된다.
alert( 1e500 ); // Infinity

